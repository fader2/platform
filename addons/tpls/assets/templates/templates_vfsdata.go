// Code generated by vfsgen; DO NOT EDIT.

// +build deploy_build

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	mustUnmarshalTextTime := func(text string) time.Time {
		var t time.Time
		err := t.UnmarshalText([]byte(text))
		if err != nil {
			panic(err)
		}
		return t
	}

	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: mustUnmarshalTextTime("2017-06-25T12:58:17Z"),
		},
		"/tpls": &vfsgen۰DirInfo{
			name:    "tpls",
			modTime: mustUnmarshalTextTime("2017-06-25T13:00:17Z"),
		},
		"/tpls/bootstrap.lua": &vfsgen۰CompressedFileInfo{
			name:             "bootstrap.lua",
			modTime:          mustUnmarshalTextTime("2017-07-09T08:41:13Z"),
			uncompressedSize: 262,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x28\xca\xcc\x2b\xd1\x50\x4a\xca\xcf\x2f\x29\x2e\x29\x4a\x2c\x50\x28\x29\xc8\x29\x56\xd2\xe4\x4a\x4e\x4b\xb7\x2a\x4e\x2d\xd1\x50\x02\xf3\x75\x14\x94\x32\xf3\x32\x4b\x14\xfc\xbd\x95\x34\xb9\xc0\x72\x89\x29\x29\x41\xf9\xa5\x25\xa9\x1a\x4a\xee\xae\x21\x20\x79\xfd\xe4\xfc\xbc\xe2\xfc\x9c\x54\x7d\x90\x06\xfd\xb4\xa2\xc4\xf4\xdc\xd4\xbc\x92\x62\x7d\x2b\x18\xd3\xd3\x45\x3f\x35\x25\xb3\x04\xa4\x16\x45\x49\x3c\x48\x54\x2f\x2b\x15\x97\x4c\x4e\x69\x22\xd4\x3d\x08\x3b\x03\xfc\x83\x49\xb6\x14\x9f\xf1\x80\x00\x00\x00\xff\xff\x9d\xaa\x25\xf6\x06\x01\x00\x00"),
		},
		"/tpls/fragment_edit.jet": &vfsgen۰CompressedFileInfo{
			name:             "fragment_edit.jet",
			modTime:          mustUnmarshalTextTime("2017-07-02T06:01:31Z"),
			uncompressedSize: 1873,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x5d\x8f\xeb\x34\x13\xbe\xcf\xaf\x98\xd7\x7a\xa5\xd3\x4a\x27\x31\x5d\x90\x40\xdb\xb8\x08\xb6\x8b\xe8\x05\x9c\x23\x75\x41\x70\xe9\xda\x93\xc4\x5b\xc7\x2e\xf1\xa4\x1f\x94\xfe\x77\xe4\x64\xab\xa6\x7b\x0a\x8b\x10\x57\xc9\xcc\xd8\xcf\x47\xfd\xc4\xcd\xff\x37\xff\xf0\xf0\xf4\xeb\xc7\x47\xa8\xa8\xb6\xb3\x24\x8f\x0f\xb0\xd2\x95\x82\x35\x2d\x8b\x0d\x94\x7a\x96\x00\x00\xe4\x35\x92\x84\x8a\x68\x93\xe2\x6f\xad\xd9\x0a\xf6\xe0\x1d\xa1\xa3\xf4\xe9\xb0\x41\x06\xaa\xaf\x04\x23\xdc\x13\x8f\x40\x53\x50\x95\x6c\x02\x92\x68\xa9\x48\xbf\x62\xc0\x87\x48\xe7\x19\xbb\x35\x1c\xd2\xfc\x92\xfe\xf4\x4d\xfa\xe0\xeb\x8d\x24\xb3\xb2\x43\xa6\xc5\xa3\x40\x5d\xe2\x65\xaf\x35\x6e\x0d\x0d\x5a\xc1\x42\xe5\x1b\x52\x2d\x81\x51\xde\x31\xa8\x1a\x2c\x04\xe3\x81\x24\x19\xc5\x4d\x5d\xf2\x42\x6e\xe3\x28\x33\xca\x33\xa0\xc3\x06\x05\x33\xb5\x2c\x91\xef\xd3\x7e\xcb\x95\x1e\x27\x6b\x14\x6c\x6b\x70\xb7\xf1\x0d\x0d\x24\xec\x8c\xa6\x4a\x68\xdc\x1a\x85\x69\x57\xbc\x07\xe3\x0c\x19\x69\xd3\xa0\xa4\x45\x31\xc9\x3e\x63\x9f\xca\xa3\x83\xc5\x50\x21\xd2\x59\x5b\x74\x1c\xee\x39\x57\xda\x3d\x87\x4c\x59\xdf\xea\xc2\xca\x06\x33\xe5\x6b\x2e\x9f\xe5\x9e\x5b\xb3\x0a\xbc\x35\x6b\x43\xfc\x2e\xbb\xfb\x32\xfb\x82\xab\xf0\xd2\xc8\xa4\xad\x7d\xa0\xb4\xb0\x92\xb2\xda\xb8\x4c\x85\xd0\x39\xc8\x79\x7f\x80\xf9\xca\xeb\xc3\x2c\x49\x8e\x47\x68\xe4\x0e\xee\x05\x8c\x4c\x08\x48\xa3\xb9\x24\x39\x86\xaf\x21\x3e\xef\x81\xb1\xf1\xe9\x94\x24\xb9\x36\x5b\x50\x56\x86\x20\x58\xbb\xee\x6d\xa5\x93\xf4\x0e\xda\x75\x1a\x9d\x4b\xe3\xb0\xb9\x2a\x52\x85\x8e\xb0\x39\x1b\x2d\x7c\x53\x0f\x00\x62\xc9\xa0\x46\xaa\xbc\x16\xec\xe3\x87\xe5\xd3\xcb\xc2\x7e\xb1\x41\xab\x03\xd2\xa5\xd5\xff\x58\x58\xa2\xd3\xd7\xcd\xe3\xb1\x68\x64\x59\xa3\xa3\xc5\xfc\x74\x7a\x35\x02\x53\xc0\x8f\x9e\x1e\xf7\x26\x50\x80\x57\xe3\x3c\xd4\xd2\xda\x99\xf3\x04\xd8\x2d\xc8\x79\xdf\x79\x0d\x82\x4e\x7f\xb2\x97\xdf\xd2\x92\x1b\xb7\x89\xf9\xd2\x82\x5d\x44\xb1\x97\xa4\x0c\x3b\x5b\x69\x5b\x14\xec\x5a\xfb\x39\x73\x95\xd1\x1a\x2f\x69\xbb\x0d\x5e\x97\x0e\x69\x31\x4f\xaf\x21\xd2\x46\xee\xce\x7c\x5a\x92\x1c\x30\x35\x72\xf7\x47\x90\x05\x7e\x4f\xb5\x7d\x9b\x2b\x9e\xf6\xdf\x33\xc5\xe0\xb3\x1b\x89\x98\xc4\x10\x04\xd5\x78\x6b\xe5\xca\x62\xba\xf2\x7b\x36\xcb\xb9\x36\xdb\x57\x14\xab\x96\xc8\xbb\x01\x42\xdf\x60\xb3\xa5\xdc\x62\xce\xfb\x6a\x90\x09\x7e\x1d\x8a\x9c\xc7\x08\xc5\x38\x77\xd0\x49\x1e\x54\x63\x36\x04\xa1\x51\x82\xbd\xf9\xcd\x48\x85\x7c\x92\xdd\x65\x9f\xc7\xb7\xec\x39\x44\x89\x3d\xc0\xec\x5f\x23\xd5\x5e\x63\x1a\x2f\xb9\xff\x12\x4f\x3f\x4b\x57\xfa\xdb\x88\xb3\x64\x2b\x9b\xf8\xf1\x2e\xe6\x20\xe0\x8d\x54\x4c\xbb\xc5\xa8\x0d\xf9\x06\x04\x44\xdb\xb1\x18\xbd\x75\xc4\xe3\x69\xd2\x6f\xca\x02\xd2\x77\xde\xd1\xd2\xfc\x8e\x23\x36\x99\x6c\x68\x30\x2b\x91\x96\x18\x82\xf1\x6e\x34\x8e\x0b\x7f\xf0\x1a\x47\x2c\x7a\x89\x2e\x78\xef\xe2\x1a\xeb\xe7\x98\xcc\x91\xf6\xaa\x8d\x84\x11\xe1\xd1\x62\x7c\xfd\xf6\xb0\xd0\xa3\xce\xd5\x38\xeb\xe2\xfb\x17\x34\xde\x8d\xde\xa9\x4a\xba\x12\xdf\xbd\x87\xa2\x75\x8a\xba\x3e\x1c\xbb\x7c\xfc\x13\x60\x10\x70\x0b\xb8\x3c\x8b\x1b\x4f\x93\xd3\x78\x9a\x9c\xd9\xff\xbf\xb2\x5e\xad\x97\x5d\xb6\x8d\x2b\x41\xc0\xc2\x15\xf1\x66\x3f\x4c\x93\xcb\xe1\x24\x39\xef\x6f\xd6\xbc\xfb\xc7\x9b\xfd\x19\x00\x00\xff\xff\x2b\x11\x3e\xbf\x51\x07\x00\x00"),
		},
		"/tpls/fragment_edit.lua": &vfsgen۰CompressedFileInfo{
			name:             "fragment_edit.lua",
			modTime:          mustUnmarshalTextTime("2017-07-09T08:56:28Z"),
			uncompressedSize: 430,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xcf\x4b\xc3\x30\x14\xc7\xef\xf9\x2b\x1e\x39\x25\x30\xda\xfb\xa0\x87\xe9\xaa\x88\xae\x0c\xad\x5e\x4b\xda\xbc\xce\x60\x96\x68\xf2\x8a\xfb\xf3\x25\x4d\x47\x15\x0f\x21\xf0\xde\xe7\xfb\x23\xb1\x7e\x50\x16\x7a\x6f\x49\xf7\x50\x41\xc0\xaf\xc9\x04\x14\x3c\x4f\xb8\x64\x19\x88\xe4\x03\x42\xb5\x80\x45\x3f\x0d\x1f\x48\xa2\x3d\x3e\x75\x77\xcf\xbb\xfb\x43\xdd\xb4\x2f\xdd\xcd\xeb\xed\x63\xdd\x76\xcd\xee\x50\x4b\xc6\xcc\x08\x03\x5d\xb6\x26\x1e\x7d\x24\x21\x81\xde\xd1\x31\x00\x80\x6c\xe8\xf0\x7b\xaf\x48\x41\x35\x53\xa3\x0f\xe7\x37\x65\x27\x14\x5c\x2b\x52\x5c\xfe\x22\xc7\xa0\x4e\x67\x74\xf4\xb0\xff\x0f\xaf\xbb\x45\x32\xf7\xdc\x46\x24\xb1\xae\x36\xd7\xb0\x8c\x24\x8b\x80\xda\x04\x1c\x48\xf0\x72\xf0\x2e\x7a\x8b\x25\x7d\xda\x58\x5e\x45\xb1\xe4\x45\xb1\x3a\x14\x05\x2f\x51\x1b\x5a\x42\xb4\x87\x80\x34\x05\x07\xe8\x34\x4b\x67\xf9\x25\x9d\x5f\x94\x4b\x9c\x90\x44\xca\x4a\xf7\x9f\xa2\x92\xa5\x71\xea\xc8\x53\x2b\xbe\x99\x75\x12\xd6\x71\xe3\xa9\xbe\x98\x48\x71\xd9\x41\x55\x81\x33\x56\xb2\x9f\x00\x00\x00\xff\xff\x61\xe2\x47\x94\xae\x01\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/tpls"].(os.FileInfo),
	}
	fs["/tpls"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/tpls/bootstrap.lua"].(os.FileInfo),
		fs["/tpls/fragment_edit.jet"].(os.FileInfo),
		fs["/tpls/fragment_edit.lua"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr: gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
