// Code generated by vfsgen; DO NOT EDIT.

// +build deploy_build

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	mustUnmarshalTextTime := func(text string) time.Time {
		var t time.Time
		err := t.UnmarshalText([]byte(text))
		if err != nil {
			panic(err)
		}
		return t
	}

	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: mustUnmarshalTextTime("2017-06-25T12:58:17Z"),
		},
		"/tpls": &vfsgen۰DirInfo{
			name:    "tpls",
			modTime: mustUnmarshalTextTime("2017-06-25T13:00:17Z"),
		},
		"/tpls/bootstrap.lua": &vfsgen۰CompressedFileInfo{
			name:             "bootstrap.lua",
			modTime:          mustUnmarshalTextTime("2017-06-25T15:31:32Z"),
			uncompressedSize: 268,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x28\xca\xcc\x2b\xd1\x50\x4a\xca\xcf\x2f\x29\x2e\x29\x4a\x2c\x50\x28\x29\xc8\x29\x56\xd2\xe4\x4a\x4e\x4b\xd7\xd0\xb4\x0a\x4e\x2d\xd1\x50\x02\x8b\xe8\x28\x28\x65\xe6\x65\x96\x28\xf8\x7b\x2b\x69\x72\x41\x65\x1d\x53\x52\x82\xf2\x4b\x4b\x52\x35\x94\xdc\x5d\x43\x40\x2a\xf4\x93\xf3\xf3\x8a\xf3\x73\x52\xf5\x41\x5a\xf4\xd3\x8a\x12\xd3\x73\x53\xf3\x4a\x8a\xf5\xad\x60\x4c\x4f\x17\xfd\xd4\x94\xcc\x12\x90\x5a\x14\x25\xf1\x20\x51\xbd\xac\x54\x5c\x32\x39\xa5\x89\x70\x37\x21\x6c\x0d\xf0\x0f\x26\xd9\x5a\x7c\x16\x00\x02\x00\x00\xff\xff\x17\x3c\xbf\x36\x0c\x01\x00\x00"),
		},
		"/tpls/fragment_edit.jet": &vfsgen۰CompressedFileInfo{
			name:             "fragment_edit.jet",
			modTime:          mustUnmarshalTextTime("2017-06-25T15:23:07Z"),
			uncompressedSize: 1851,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x55\x5d\x8f\xe3\x34\x14\x7d\xcf\xaf\xb8\x58\x48\xdb\x4a\x9b\x98\x0e\x48\xa0\x6d\x5c\x04\xd3\x22\xf5\x01\x76\xa5\x0e\x08\x1e\x5d\xfb\x26\xf1\xd4\xb1\x4b\x7c\x93\x69\x19\xcd\x7f\x47\x4e\xa6\x6a\x3a\x53\x18\x84\xf6\x29\xb9\x1f\x3e\xf7\x9c\xde\x53\x27\xff\x62\xf9\xf1\xf6\xee\x8f\x4f\x2b\xa8\xa8\xb6\x8b\x24\x8f\x0f\xb0\xd2\x95\x82\x35\x2d\x8b\x09\x94\x7a\x91\x00\x00\xe4\x35\x92\x84\x8a\x68\x9f\xe2\x9f\xad\xe9\x04\xbb\xf5\x8e\xd0\x51\x7a\x77\xdc\x23\x03\x35\x44\x82\x11\x1e\x88\x47\xa0\x39\xa8\x4a\x36\x01\x49\xb4\x54\xa4\xdf\x31\xe0\x63\xa4\x53\x8d\x5d\x2b\x8e\xc7\xfc\x9e\xfe\xfa\x43\x7a\xeb\xeb\xbd\x24\xb3\xb5\xe3\x49\xeb\x95\x40\x5d\xe2\xf9\xac\x35\x6e\x07\x0d\x5a\xc1\x42\xe5\x1b\x52\x2d\x81\x51\xde\x31\xa8\x1a\x2c\x04\xe3\x81\x24\x19\xc5\x4d\x5d\xf2\x42\x76\xb1\x94\x19\xe5\x19\xd0\x71\x8f\x82\x99\x5a\x96\xc8\x0f\xe9\x70\xe4\x82\x8f\x93\x35\x0a\xd6\x19\x7c\xd8\xfb\x86\x46\x14\x1e\x8c\xa6\x4a\x68\xec\x8c\xc2\xb4\x0f\xde\x83\x71\x86\x8c\xb4\x69\x50\xd2\xa2\x98\x65\x5f\xb1\xd7\xf4\xe8\x68\x31\x54\x88\x74\xe2\x16\x15\x87\x0f\x9c\x2b\xed\xee\x43\xa6\xac\x6f\x75\x61\x65\x83\x99\xf2\x35\x97\xf7\xf2\xc0\xad\xd9\x06\xde\x9a\x9d\x21\x7e\x93\xdd\x7c\x9b\x7d\xc3\x55\x78\x4e\x64\xd2\xd6\x3e\x50\x5a\x58\x49\x59\x6d\x5c\xa6\x42\xe8\x15\xe4\x7c\x58\x60\xbe\xf5\xfa\xb8\x48\x92\x5c\x9b\x0e\x94\x95\x21\x08\xd6\xee\x06\xc2\xe9\x2c\xbd\x81\x76\x97\x46\x4d\xd2\x38\x6c\x2e\x82\x54\xa1\x23\x6c\x4e\x12\x0a\xdf\xd4\x23\x80\x18\x32\xa8\x91\x2a\xaf\x05\xfb\xf4\x71\x73\xf7\xdc\x38\x34\x1b\xb4\x3a\x20\x9d\x53\xc3\xcf\x80\x25\x3a\x7d\x99\x7c\x7c\x2c\x1a\x59\xd6\xe8\x68\xbd\x7c\x7a\x7a\x51\x02\x53\xc0\x2f\x9e\x56\x07\x13\x28\xc0\x8b\x72\x1e\x6a\x69\xed\xc2\x79\x02\xec\x1b\x72\x3e\x64\x5e\x82\xa0\xd3\xaf\xce\xf2\x6b\x5c\x72\xe3\xf6\xd1\x39\x5a\xb0\x33\x29\xf6\xec\x81\x71\xa6\x93\xb6\x45\xc1\x2e\xb9\x9f\xdc\x54\x19\xad\xf1\xec\xa3\xeb\xe0\x75\xe9\x90\xd6\xcb\xf4\x12\x22\x6d\xe4\xc3\x69\x9e\x96\x24\x47\x93\x4c\x08\x48\x93\xa5\x24\x39\x85\xef\x21\x3e\xe1\x03\x30\x06\x6f\xcf\x8d\x9b\xff\xf7\xa9\xd1\xde\xec\x8a\x3b\x66\xd1\x10\x41\x35\xde\x5a\xb9\xb5\x98\x6e\xfd\x81\x2d\x72\xae\x4d\xf7\x62\xc4\xb6\x25\xf2\x6e\x84\x30\x24\xd8\x62\x23\x3b\xcc\xf9\x10\x8d\xfc\xc1\x2f\x0d\x92\xf3\x68\xa7\x68\xda\x1e\x3a\xc9\x83\x6a\xcc\x9e\x20\x34\x4a\xb0\x37\xff\x19\x52\x21\x9f\x65\x37\xd9\xd7\xf1\x2d\xbb\x0f\x91\xe2\x00\xb0\xf8\xdf\x48\xb5\xd7\x98\xc6\xab\xec\x73\xe2\xe9\x7b\xe9\x4a\x7f\x1d\x71\x91\x74\xb2\x81\x46\x3e\xac\x97\x20\xe0\x0d\x87\xcc\xfb\x66\xd4\x86\x7c\x03\x02\xa2\xec\x18\x4c\xde\x5a\xf1\x74\x9e\x0c\x87\xb2\x80\xf4\x93\x77\xb4\x31\x7f\xe1\x84\xcd\x66\x7b\x1a\xd5\x4a\xa4\x0d\x86\x60\xbc\x9b\x4c\x63\xe3\xcf\x5e\xe3\x84\x45\x2d\x51\x05\x1f\x54\x5c\x62\xfd\x16\x5d\x3a\xd1\x5e\xb5\x71\x60\x44\x58\x59\x8c\xaf\x3f\x1e\xd7\x7a\xd2\xab\x9a\x66\xbd\x95\xff\x61\x8c\x77\x93\x77\xaa\x92\xae\xc4\x77\xef\xa1\x68\x9d\xa2\x3e\x0f\x8f\xbd\x3f\xfe\x0b\x30\x08\xb8\x06\x5c\x9e\xc8\x4d\xe7\xc9\xd3\x74\x9e\x24\xf1\x23\xb5\x1a\x1a\xbf\xdc\x5a\xaf\x76\x9b\xde\xdf\xc6\x95\x20\x60\xed\x8a\x78\x87\x1f\xe7\xc9\x79\x41\x49\xce\x87\x3b\x34\xef\xbf\x6d\x8b\xbf\x03\x00\x00\xff\xff\xa9\x62\xd2\x4a\x3b\x07\x00\x00"),
		},
		"/tpls/fragment_edit.lua": &vfsgen۰CompressedFileInfo{
			name:             "fragment_edit.lua",
			modTime:          mustUnmarshalTextTime("2017-06-25T15:41:34Z"),
			uncompressedSize: 444,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\x4f\x6b\xc2\x30\x18\xc6\xef\xf9\x14\x2f\x39\x25\x20\xed\x5d\xe8\x41\x67\x15\xd9\x2c\xa2\xdd\xae\x25\x36\xaf\x5b\x58\x4c\xb6\xe4\x2d\xf3\xe3\x8f\x9a\x48\x1d\xec\x50\x28\x79\x7e\xcf\x9f\xc4\xfa\x5e\x59\x38\x79\x4b\xfa\x04\x15\x04\xfc\x1e\x4c\x40\xc1\xd3\x09\x97\x2c\x01\x91\x7c\x40\xa8\x32\x58\x2c\x87\xfe\x13\x49\xb4\xfb\x97\x6e\x7d\x58\x6c\x76\x75\xd3\x1e\xbb\xe5\xeb\xd3\x73\xdd\x76\xcd\x62\x57\x4b\xc6\xcc\x19\x7a\xba\x0a\x39\xdf\xc6\xbd\x8f\x24\x24\xd0\x07\x3a\x06\x00\x90\x22\x1d\xfe\xac\x14\x29\xa8\x32\xb7\xf6\xe1\xf2\xa6\xec\x80\x82\x6b\x45\x8a\xcb\x07\xf6\x1c\xd4\xfb\x05\x1d\x6d\x57\xff\xe1\x93\x9a\x4d\xb7\xb5\xf3\x23\x92\x98\xa4\xd9\xbd\x30\x21\x29\xe4\x80\xda\x04\xec\x49\xf0\xb2\xf7\x2e\x7a\x8b\x25\x7d\xd9\x58\xde\x6d\xb1\xe4\x45\x31\x65\x14\x05\x2f\x51\x1b\xca\x35\xda\x43\x40\x1a\x82\x03\x74\x9a\x8d\x5f\x7e\x2d\x9d\xee\x95\x66\x6c\x90\x44\x6a\x1b\xff\xfe\x8c\x95\x2c\x09\xe3\x52\x3e\x6e\xe3\xb3\x9b\x57\xc2\xa3\xd0\x78\xaa\xaf\x26\x52\xcc\x2a\x54\x15\x38\x63\x25\xfb\x0d\x00\x00\xff\xff\xb9\x9b\xad\xff\xbc\x01\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/tpls"].(os.FileInfo),
	}
	fs["/tpls"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/tpls/bootstrap.lua"].(os.FileInfo),
		fs["/tpls/fragment_edit.jet"].(os.FileInfo),
		fs["/tpls/fragment_edit.lua"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr: gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
